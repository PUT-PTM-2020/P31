
PTM_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800391c  0800391c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000074  08003998  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003998  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132ce  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f42  00000000  00000000  00033372  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  000362b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248b6  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd4d  00000000  00000000  0005c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce262  00000000  00000000  00067f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003558  00000000  00000000  00136200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003864 	.word	0x08003864

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08003864 	.word	0x08003864

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 fce9 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 ff2e 	bl	800335c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fcf3 	bl	8000f16 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 fcc9 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000a0 	.word	0x200000a0

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000a0 	.word	0x200000a0

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e033      	b.n	800066e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f001 fd40 	bl	8002094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d118      	bne.n	8000660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fa92 	bl	8000b6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068a:	2b01      	cmp	r3, #1
 800068c:	d101      	bne.n	8000692 <HAL_ADC_Start+0x1a>
 800068e:	2302      	movs	r3, #2
 8000690:	e0a5      	b.n	80007de <HAL_ADC_Start+0x166>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d018      	beq.n	80006da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006b8:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <HAL_ADC_Start+0x174>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a4c      	ldr	r2, [pc, #304]	; (80007f0 <HAL_ADC_Start+0x178>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9a      	lsrs	r2, r3, #18
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006cc:	e002      	b.n	80006d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f9      	bne.n	80006ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d179      	bne.n	80007dc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000712:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000726:	d106      	bne.n	8000736 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072c:	f023 0206 	bic.w	r2, r3, #6
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	645a      	str	r2, [r3, #68]	; 0x44
 8000734:	e002      	b.n	800073c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000744:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <HAL_ADC_Start+0x17c>)
 8000746:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000750:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b00      	cmp	r3, #0
 800075c:	d12a      	bne.n	80007b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <HAL_ADC_Start+0x180>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d015      	beq.n	8000794 <HAL_ADC_Start+0x11c>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HAL_ADC_Start+0x184>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d105      	bne.n	800077e <HAL_ADC_Start+0x106>
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <HAL_ADC_Start+0x17c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00a      	beq.n	8000794 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <HAL_ADC_Start+0x188>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d129      	bne.n	80007dc <HAL_ADC_Start+0x164>
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_ADC_Start+0x17c>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d823      	bhi.n	80007dc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d11c      	bne.n	80007dc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	e013      	b.n	80007dc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <HAL_ADC_Start+0x180>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d10e      	bne.n	80007dc <HAL_ADC_Start+0x164>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d107      	bne.n	80007dc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007da:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	431bde83 	.word	0x431bde83
 80007f4:	40012300 	.word	0x40012300
 80007f8:	40012000 	.word	0x40012000
 80007fc:	40012100 	.word	0x40012100
 8000800:	40012200 	.word	0x40012200

08000804 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800081c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000820:	d113      	bne.n	800084a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800082c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000830:	d10b      	bne.n	800084a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f043 0220 	orr.w	r2, r3, #32
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e05c      	b.n	8000904 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800084a:	f7ff fea3 	bl	8000594 <HAL_GetTick>
 800084e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000850:	e01a      	b.n	8000888 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d016      	beq.n	8000888 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <HAL_ADC_PollForConversion+0x6c>
 8000860:	f7ff fe98 	bl	8000594 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d20b      	bcs.n	8000888 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f043 0204 	orr.w	r2, r3, #4
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000884:	2303      	movs	r3, #3
 8000886:	e03d      	b.n	8000904 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	2b02      	cmp	r3, #2
 8000894:	d1dd      	bne.n	8000852 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f06f 0212 	mvn.w	r2, #18
 800089e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d123      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d11f      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d111      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d105      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f043 0201 	orr.w	r2, r3, #1
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800093c:	2b01      	cmp	r3, #1
 800093e:	d101      	bne.n	8000944 <HAL_ADC_ConfigChannel+0x1c>
 8000940:	2302      	movs	r3, #2
 8000942:	e105      	b.n	8000b50 <HAL_ADC_ConfigChannel+0x228>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2201      	movs	r2, #1
 8000948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b09      	cmp	r3, #9
 8000952:	d925      	bls.n	80009a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68d9      	ldr	r1, [r3, #12]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	3b1e      	subs	r3, #30
 800096a:	2207      	movs	r2, #7
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43da      	mvns	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	400a      	ands	r2, r1
 8000978:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68d9      	ldr	r1, [r3, #12]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	b29b      	uxth	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	4603      	mov	r3, r0
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4403      	add	r3, r0
 8000992:	3b1e      	subs	r3, #30
 8000994:	409a      	lsls	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	430a      	orrs	r2, r1
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	e022      	b.n	80009e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6919      	ldr	r1, [r3, #16]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	2207      	movs	r2, #7
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	400a      	ands	r2, r1
 80009c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6919      	ldr	r1, [r3, #16]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	4603      	mov	r3, r0
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4403      	add	r3, r0
 80009dc:	409a      	lsls	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d824      	bhi.n	8000a38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	3b05      	subs	r3, #5
 8000a00:	221f      	movs	r2, #31
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	3b05      	subs	r3, #5
 8000a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
 8000a36:	e04c      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b0c      	cmp	r3, #12
 8000a3e:	d824      	bhi.n	8000a8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	3b23      	subs	r3, #35	; 0x23
 8000a52:	221f      	movs	r2, #31
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43da      	mvns	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	400a      	ands	r2, r1
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	3b23      	subs	r3, #35	; 0x23
 8000a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
 8000a88:	e023      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	3b41      	subs	r3, #65	; 0x41
 8000a9c:	221f      	movs	r2, #31
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	3b41      	subs	r3, #65	; 0x41
 8000ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_ADC_ConfigChannel+0x234>)
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <HAL_ADC_ConfigChannel+0x238>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d109      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x1cc>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d105      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_ADC_ConfigChannel+0x238>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d123      	bne.n	8000b46 <HAL_ADC_ConfigChannel+0x21e>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b10      	cmp	r3, #16
 8000b04:	d003      	beq.n	8000b0e <HAL_ADC_ConfigChannel+0x1e6>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b11      	cmp	r3, #17
 8000b0c:	d11b      	bne.n	8000b46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	d111      	bne.n	8000b46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_ADC_ConfigChannel+0x23c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_ADC_ConfigChannel+0x240>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	0c9a      	lsrs	r2, r3, #18
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b38:	e002      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f9      	bne.n	8000b3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40012300 	.word	0x40012300
 8000b60:	40012000 	.word	0x40012000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	431bde83 	.word	0x431bde83

08000b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b74:	4b79      	ldr	r3, [pc, #484]	; (8000d5c <ADC_Init+0x1f0>)
 8000b76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6859      	ldr	r1, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	021a      	lsls	r2, r3, #8
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6859      	ldr	r1, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6899      	ldr	r1, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	4a58      	ldr	r2, [pc, #352]	; (8000d60 <ADC_Init+0x1f4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d022      	beq.n	8000c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6899      	ldr	r1, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6899      	ldr	r1, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	e00f      	b.n	8000c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 0202 	bic.w	r2, r2, #2
 8000c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6899      	ldr	r1, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7e1b      	ldrb	r3, [r3, #24]
 8000c84:	005a      	lsls	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d01b      	beq.n	8000cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ca6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	035a      	lsls	r2, r3, #13
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	e007      	b.n	8000ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	051a      	lsls	r2, r3, #20
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6899      	ldr	r1, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d22:	025a      	lsls	r2, r3, #9
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6899      	ldr	r1, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	029a      	lsls	r2, r3, #10
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	609a      	str	r2, [r3, #8]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40012300 	.word	0x40012300
 8000d60:	0f000001 	.word	0x0f000001

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e16b      	b.n	8001224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 815a 	bne.w	800121e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d00b      	beq.n	8000f8a <HAL_GPIO_Init+0x5a>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7e:	2b11      	cmp	r3, #17
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0xfc>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b4 	beq.w	800121e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <HAL_GPIO_Init+0x308>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a5e      	ldr	r2, [pc, #376]	; (8001238 <HAL_GPIO_Init+0x308>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b5c      	ldr	r3, [pc, #368]	; (8001238 <HAL_GPIO_Init+0x308>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a5a      	ldr	r2, [pc, #360]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_GPIO_Init+0x310>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x314>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x318>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	; (800124c <HAL_GPIO_Init+0x31c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x320>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x324>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <HAL_GPIO_Init+0x328>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4a      	ldr	r2, [pc, #296]	; (800125c <HAL_GPIO_Init+0x32c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20a>
 8001136:	2307      	movs	r3, #7
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113a:	2308      	movs	r3, #8
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4934      	ldr	r1, [pc, #208]	; (800123c <HAL_GPIO_Init+0x30c>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_GPIO_Init+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <HAL_GPIO_Init+0x330>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_GPIO_Init+0x330>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <HAL_GPIO_Init+0x330>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_GPIO_Init+0x330>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_GPIO_Init+0x330>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_GPIO_Init+0x330>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_GPIO_Init+0x330>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae90 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	; 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40021400 	.word	0x40021400
 8001258:	40021800 	.word	0x40021800
 800125c:	40021c00 	.word	0x40021c00
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e25b      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e236      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a90      	ldr	r2, [pc, #576]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a83      	ldr	r2, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff f920 	bl	8000594 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff f91c 	bl	8000594 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1fb      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff f90c 	bl	8000594 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff f908 	bl	8000594 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1e7      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1bb      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4952      	ldr	r1, [pc, #328]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff f8c1 	bl	8000594 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff f8bd 	bl	8000594 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e19c      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4940      	ldr	r1, [pc, #256]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff f8a0 	bl	8000594 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff f89c 	bl	8000594 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e17b      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d030      	beq.n	80014e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff f880 	bl	8000594 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff f87c 	bl	8000594 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e15b      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff f869 	bl	8000594 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff f865 	bl	8000594 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e144      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a0 	beq.w	8001632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d121      	bne.n	8001572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff f82b 	bl	8000594 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e011      	b.n	8001566 <HAL_RCC_OscConfig+0x2ce>
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
 8001550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001554:	f7ff f81e 	bl	8000594 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0fd      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x4d4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 800157a:	4b7d      	ldr	r3, [pc, #500]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a7c      	ldr	r2, [pc, #496]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e01c      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 8001590:	4b77      	ldr	r3, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a76      	ldr	r2, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b74      	ldr	r3, [pc, #464]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a73      	ldr	r2, [pc, #460]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e00b      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 80015aa:	4b71      	ldr	r3, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a70      	ldr	r2, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b6e      	ldr	r3, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a6d      	ldr	r2, [pc, #436]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d015      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7fe ffe3 	bl	8000594 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7fe ffdf 	bl	8000594 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0bc      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ee      	beq.n	80015d2 <HAL_RCC_OscConfig+0x33a>
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7fe ffcd 	bl	8000594 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7fe ffc9 	bl	8000594 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0a6      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ee      	bne.n	80015fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001626:	4b52      	ldr	r3, [pc, #328]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a51      	ldr	r2, [pc, #324]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8092 	beq.w	8001760 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163c:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d05c      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d141      	bne.n	80016d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_RCC_OscConfig+0x4dc>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7fe ff9d 	bl	8000594 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7fe ff99 	bl	8000594 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e078      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	061b      	lsls	r3, r3, #24
 80016a0:	4933      	ldr	r1, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_RCC_OscConfig+0x4dc>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7fe ff72 	bl	8000594 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7fe ff6e 	bl	8000594 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04d      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x41c>
 80016d2:	e045      	b.n	8001760 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7fe ff5b 	bl	8000594 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7fe ff57 	bl	8000594 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e036      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x44a>
 8001700:	e02e      	b.n	8001760 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e029      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	429a      	cmp	r2, r3
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d115      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d10d      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000
 8001770:	40023800 	.word	0x40023800
 8001774:	42470060 	.word	0x42470060

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7fe fe94 	bl	8000594 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7fe fe90 	bl	8000594 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4601      	mov	r1, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	fa21 f303 	lsr.w	r3, r1, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdf4 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08003904 	.word	0x08003904
 800193c:	20000008 	.word	0x20000008
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b04      	cmp	r3, #4
 8001964:	d007      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x32>
 8001966:	2b08      	cmp	r3, #8
 8001968:	d008      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x38>
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 80b4 	bne.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001972:	60bb      	str	r3, [r7, #8]
       break;
 8001974:	e0b3      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001976:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001978:	60bb      	str	r3, [r7, #8]
      break;
 800197a:	e0b0      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197c:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001984:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04a      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	f04f 0400 	mov.w	r4, #0
 800199c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	ea03 0501 	and.w	r5, r3, r1
 80019a8:	ea04 0602 	and.w	r6, r4, r2
 80019ac:	4629      	mov	r1, r5
 80019ae:	4632      	mov	r2, r6
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	f04f 0400 	mov.w	r4, #0
 80019b8:	0154      	lsls	r4, r2, #5
 80019ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019be:	014b      	lsls	r3, r1, #5
 80019c0:	4619      	mov	r1, r3
 80019c2:	4622      	mov	r2, r4
 80019c4:	1b49      	subs	r1, r1, r5
 80019c6:	eb62 0206 	sbc.w	r2, r2, r6
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	f04f 0400 	mov.w	r4, #0
 80019d2:	0194      	lsls	r4, r2, #6
 80019d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d8:	018b      	lsls	r3, r1, #6
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	eb64 0402 	sbc.w	r4, r4, r2
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	00e2      	lsls	r2, r4, #3
 80019ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ee:	00d9      	lsls	r1, r3, #3
 80019f0:	460b      	mov	r3, r1
 80019f2:	4614      	mov	r4, r2
 80019f4:	195b      	adds	r3, r3, r5
 80019f6:	eb44 0406 	adc.w	r4, r4, r6
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	0262      	lsls	r2, r4, #9
 8001a04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a08:	0259      	lsls	r1, r3, #9
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4621      	mov	r1, r4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f04f 0400 	mov.w	r4, #0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	f7fe fbd4 	bl	80001c8 <__aeabi_uldivmod>
 8001a20:	4603      	mov	r3, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e049      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	f04f 0400 	mov.w	r4, #0
 8001a32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	ea03 0501 	and.w	r5, r3, r1
 8001a3e:	ea04 0602 	and.w	r6, r4, r2
 8001a42:	4629      	mov	r1, r5
 8001a44:	4632      	mov	r2, r6
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	f04f 0400 	mov.w	r4, #0
 8001a4e:	0154      	lsls	r4, r2, #5
 8001a50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a54:	014b      	lsls	r3, r1, #5
 8001a56:	4619      	mov	r1, r3
 8001a58:	4622      	mov	r2, r4
 8001a5a:	1b49      	subs	r1, r1, r5
 8001a5c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	f04f 0400 	mov.w	r4, #0
 8001a68:	0194      	lsls	r4, r2, #6
 8001a6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a6e:	018b      	lsls	r3, r1, #6
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	eb64 0402 	sbc.w	r4, r4, r2
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a84:	00d9      	lsls	r1, r3, #3
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	195b      	adds	r3, r3, r5
 8001a8c:	eb44 0406 	adc.w	r4, r4, r6
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	02a2      	lsls	r2, r4, #10
 8001a9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a9e:	0299      	lsls	r1, r3, #10
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f7fe fb89 	bl	80001c8 <__aeabi_uldivmod>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ada:	60bb      	str	r3, [r7, #8]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	68bb      	ldr	r3, [r7, #8]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e056      	b.n	8001bb4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 fbb3 	bl	800328c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	ea42 0103 	orr.w	r1, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	f003 0104 	and.w	r1, r3, #4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_SPI_Transmit+0x22>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e11e      	b.n	8001e1c <HAL_SPI_Transmit+0x260>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001be6:	f7fe fcd5 	bl	8000594 <HAL_GetTick>
 8001bea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d002      	beq.n	8001c02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c00:	e103      	b.n	8001e0a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_SPI_Transmit+0x52>
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c12:	e0fa      	b.n	8001e0a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5a:	d107      	bne.n	8001c6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d007      	beq.n	8001c8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c92:	d14b      	bne.n	8001d2c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_SPI_Transmit+0xe6>
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d13e      	bne.n	8001d20 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	881a      	ldrh	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	1c9a      	adds	r2, r3, #2
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cc6:	e02b      	b.n	8001d20 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d112      	bne.n	8001cfc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	1c9a      	adds	r2, r3, #2
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cfa:	e011      	b.n	8001d20 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfc:	f7fe fc4a 	bl	8000594 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d803      	bhi.n	8001d14 <HAL_SPI_Transmit+0x158>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d12:	d102      	bne.n	8001d1a <HAL_SPI_Transmit+0x15e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d1e:	e074      	b.n	8001e0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ce      	bne.n	8001cc8 <HAL_SPI_Transmit+0x10c>
 8001d2a:	e04c      	b.n	8001dc6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_Transmit+0x17e>
 8001d34:	8afb      	ldrh	r3, [r7, #22]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d140      	bne.n	8001dbc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	330c      	adds	r3, #12
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d60:	e02c      	b.n	8001dbc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d113      	bne.n	8001d98 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d96:	e011      	b.n	8001dbc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d98:	f7fe fbfc 	bl	8000594 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d803      	bhi.n	8001db0 <HAL_SPI_Transmit+0x1f4>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d102      	bne.n	8001db6 <HAL_SPI_Transmit+0x1fa>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dba:	e026      	b.n	8001e0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1cd      	bne.n	8001d62 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f894 	bl	8001ef8 <SPI_EndRxTxTransaction>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	77fb      	strb	r3, [r7, #31]
 8001e06:	e000      	b.n	8001e0a <HAL_SPI_Transmit+0x24e>
  }

error:
 8001e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e34:	e04c      	b.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d048      	beq.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e3e:	f7fe fba9 	bl	8000594 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d902      	bls.n	8001e54 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d13d      	bne.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e6c:	d111      	bne.n	8001e92 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e76:	d004      	beq.n	8001e82 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d107      	bne.n	8001e92 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9a:	d10f      	bne.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e00f      	b.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d1a3      	bne.n	8001e36 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <SPI_EndRxTxTransaction+0x7c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <SPI_EndRxTxTransaction+0x80>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0d5b      	lsrs	r3, r3, #21
 8001f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f22:	d112      	bne.n	8001f4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff ff78 	bl	8001e24 <SPI_WaitFlagStateUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e00f      	b.n	8001f6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d0f2      	beq.n	8001f4a <SPI_EndRxTxTransaction+0x52>
 8001f64:	e000      	b.n	8001f68 <SPI_EndRxTxTransaction+0x70>
        break;
 8001f66:	bf00      	nop
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	165e9f81 	.word	0x165e9f81

08001f7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001f82:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <MX_ADC1_Init+0x6c>)
 8001f84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001f88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <MX_ADC1_Init+0x70>)
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <MX_ADC1_Init+0x68>)
 8001fd0:	f7fe fb0e 	bl	80005f0 <HAL_ADC_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001fda:	f001 f87f 	bl	80030dc <Error_Handler>
  }

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200000ec 	.word	0x200000ec
 8001fe8:	40012000 	.word	0x40012000
 8001fec:	0f000001 	.word	0x0f000001

08001ff0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MX_ADC2_Init+0x98>)
 8002004:	4a21      	ldr	r2, [pc, #132]	; (800208c <MX_ADC2_Init+0x9c>)
 8002006:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <MX_ADC2_Init+0x98>)
 800200a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800200e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <MX_ADC2_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_ADC2_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_ADC2_Init+0x98>)
 800201e:	2200      	movs	r2, #0
 8002020:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <MX_ADC2_Init+0x98>)
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_ADC2_Init+0x98>)
 800202c:	2200      	movs	r2, #0
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_ADC2_Init+0x98>)
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <MX_ADC2_Init+0xa0>)
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_ADC2_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_ADC2_Init+0x98>)
 800203e:	2201      	movs	r2, #1
 8002040:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_ADC2_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_ADC2_Init+0x98>)
 800204c:	2201      	movs	r2, #1
 800204e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <MX_ADC2_Init+0x98>)
 8002052:	f7fe facd 	bl	80005f0 <HAL_ADC_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800205c:	f001 f83e 	bl	80030dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002060:	2301      	movs	r3, #1
 8002062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002064:	2301      	movs	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_ADC2_Init+0x98>)
 8002072:	f7fe fc59 	bl	8000928 <HAL_ADC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800207c:	f001 f82e 	bl	80030dc <Error_Handler>
  }

}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200000a4 	.word	0x200000a4
 800208c:	40012100 	.word	0x40012100
 8002090:	0f000001 	.word	0x0f000001

08002094 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2e      	ldr	r2, [pc, #184]	; (800216c <HAL_ADC_MspInit+0xd8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d128      	bne.n	8002108 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a25      	ldr	r2, [pc, #148]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	481c      	ldr	r0, [pc, #112]	; (8002174 <HAL_ADC_MspInit+0xe0>)
 8002102:	f7fe ff15 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002106:	e02c      	b.n	8002162 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_ADC_MspInit+0xe4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d127      	bne.n	8002162 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 800211c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_ADC_MspInit+0xdc>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800214a:	2302      	movs	r3, #2
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_ADC_MspInit+0xe0>)
 800215e:	f7fe fee7 	bl	8000f30 <HAL_GPIO_Init>
}
 8002162:	bf00      	nop
 8002164:	3730      	adds	r7, #48	; 0x30
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40012000 	.word	0x40012000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40012100 	.word	0x40012100

0800217c <_ZN6EntityC1Ev>:
	uint8_t height;
	uint8_t width;
	uint8_t hp;
	std::vector<uint8_t> displayVector;

	Entity() {}
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <_ZN6EntityC1Ev+0x24>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	330c      	adds	r3, #12
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f92c 	bl	80023ec <_ZNSt6vectorIhSaIhEEC1Ev>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	080038cc 	.word	0x080038cc

080021a4 <_ZN6EntityD1Ev>:
	virtual ~Entity() {};
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <_ZN6EntityD1Ev+0x24>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	330c      	adds	r3, #12
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f925 	bl	8002406 <_ZNSt6vectorIhSaIhEED1Ev>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	080038cc 	.word	0x080038cc

080021cc <_ZN6EntityD0Ev>:
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe5 	bl	80021a4 <_ZN6EntityD1Ev>
 80021da:	2118      	movs	r1, #24
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 f9a3 	bl	8003528 <_ZdlPvj>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN6PlayerD1Ev>:

class Player : public Entity {
public:
	Player();
	Player(uint8_t x, uint8_t y, uint8_t h, uint8_t w, uint8_t hp2, std::vector<uint8_t> vec);
	~Player() {};
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <_ZN6PlayerD1Ev+0x20>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ffd1 	bl	80021a4 <_ZN6EntityD1Ev>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	080038b4 	.word	0x080038b4

08002210 <_ZN6PlayerD0Ev>:
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ffe7 	bl	80021ec <_ZN6PlayerD1Ev>
 800221e:	2118      	movs	r1, #24
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f001 f981 	bl	8003528 <_ZdlPvj>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN6Entity4setXEh>:
#include "gameClasses.hpp"

void Entity::setX(uint8_t x) {
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
	positionX = x;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	711a      	strb	r2, [r3, #4]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_ZN6Entity4setYEh>:
void Entity::setY(uint8_t y) {
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
	positionY = y;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	715a      	strb	r2, [r3, #5]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_ZN6PlayerC1Ev>:
void Entity::setXY(uint8_t x, uint8_t y) {
	positionX = x;
	positionY = y;
}

Player::Player(){
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff80 	bl	800217c <_ZN6EntityC1Ev>
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <_ZN6PlayerC1Ev+0x60>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
	positionX = 20;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2214      	movs	r2, #20
 8002286:	711a      	strb	r2, [r3, #4]
	positionY = 39;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2227      	movs	r2, #39	; 0x27
 800228c:	715a      	strb	r2, [r3, #5]
	height = 4;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2204      	movs	r2, #4
 8002292:	719a      	strb	r2, [r3, #6]
	width = 9;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2209      	movs	r2, #9
 8002298:	71da      	strb	r2, [r3, #7]
	hp = 3;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	721a      	strb	r2, [r3, #8]
	displayVector = {0x08, 0x0C, 0x0E, 0x06, 0x07, 0x06, 0x0E, 0x0C, 0x08};
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 040c 	add.w	r4, r3, #12
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <_ZN6PlayerC1Ev+0x64>)
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80022b4:	f107 0308 	add.w	r3, r7, #8
 80022b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80022bc:	4620      	mov	r0, r4
 80022be:	f000 f8da 	bl	8002476 <_ZNSt6vectorIhSaIhEEaSESt16initializer_listIhE>
}
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	080038b4 	.word	0x080038b4
 80022d0:	0800387c 	.word	0x0800387c

080022d4 <_ZN6Player4shotEv>:
	width = w;
	hp = hp2;
	displayVector = vec;
}

void Player::shot() {}
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN6Player8movementEv>:
void Player::movement() {}
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_ZN5EnemyC1Ev>:

Enemy::Enemy(){
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff38 	bl	800217c <_ZN6EntityC1Ev>
 800230c:	4a13      	ldr	r2, [pc, #76]	; (800235c <_ZN5EnemyC1Ev+0x60>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
	positionX = 4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2204      	movs	r2, #4
 8002316:	711a      	strb	r2, [r3, #4]
	positionY = 0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	715a      	strb	r2, [r3, #5]
	height = 8;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	719a      	strb	r2, [r3, #6]
	width = 11;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	220b      	movs	r2, #11
 8002328:	71da      	strb	r2, [r3, #7]
	hp = 3;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2203      	movs	r2, #3
 800232e:	721a      	strb	r2, [r3, #8]
	displayVector = {0x70, 0x18, 0x7D, 0xB6, 0xBC, 0x3C, 0xBC, 0xB6, 0x7D, 0x18, 0x70};
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 040c 	add.w	r4, r3, #12
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <_ZN5EnemyC1Ev+0x64>)
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002340:	e883 0003 	stmia.w	r3, {r0, r1}
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	e893 0006 	ldmia.w	r3, {r1, r2}
 800234c:	4620      	mov	r0, r4
 800234e:	f000 f892 	bl	8002476 <_ZNSt6vectorIhSaIhEEaSESt16initializer_listIhE>
}
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	0800389c 	.word	0x0800389c
 8002360:	08003884 	.word	0x08003884

08002364 <_ZN5Enemy4shotEv>:
	width = w;
	hp = hp2;
	displayVector = vec;
}

void Enemy::shot() {}
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_ZN5Enemy8movementEv>:
void Enemy::movement() {}
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_ZN12ConstructionC1Ev>:

Construction::Construction() {
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3308      	adds	r3, #8
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f827 	bl	80023ec <_ZNSt6vectorIhSaIhEEC1Ev>
	positionX = 40;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2228      	movs	r2, #40	; 0x28
 80023a2:	701a      	strb	r2, [r3, #0]
	positionY = 0;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	705a      	strb	r2, [r3, #1]
	height = 8;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2208      	movs	r2, #8
 80023ae:	709a      	strb	r2, [r3, #2]
	width = 15;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	220f      	movs	r2, #15
 80023b4:	70da      	strb	r2, [r3, #3]
	hp = 10;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	220a      	movs	r2, #10
 80023ba:	711a      	strb	r2, [r3, #4]
	displayVector = {0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0x7E, 0x3C, 0x18};
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 0408 	add.w	r4, r3, #8
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <_ZN12ConstructionC1Ev+0x5c>)
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f84c 	bl	8002476 <_ZNSt6vectorIhSaIhEEaSESt16initializer_listIhE>
}
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	0800388c 	.word	0x0800388c

080023ec <_ZNSt6vectorIhSaIhEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f864 	bl	80024c4 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002406:	b5b0      	push	{r4, r5, r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681c      	ldr	r4, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f879 	bl	8002510 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800241e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002420:	461a      	mov	r2, r3
 8002422:	4629      	mov	r1, r5
 8002424:	4620      	mov	r0, r4
 8002426:	f000 f87e 	bl	8002526 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f856 	bl	80024de <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bdb0      	pop	{r4, r5, r7, pc}

0800243c <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ffed 	bl	800243c <_ZNKSt16initializer_listIhE5beginEv>
 8002462:	4604      	mov	r4, r0
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f86c 	bl	8002542 <_ZNKSt16initializer_listIhE4sizeEv>
 800246a:	4603      	mov	r3, r0
 800246c:	4423      	add	r3, r4
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}

08002476 <_ZNSt6vectorIhSaIhEEaSESt16initializer_listIhE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 8002476:	b5b0      	push	{r4, r5, r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ffd8 	bl	800243c <_ZNKSt16initializer_listIhE5beginEv>
 800248c:	4604      	mov	r4, r0
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ffdf 	bl	8002454 <_ZNKSt16initializer_listIhE3endEv>
 8002496:	4602      	mov	r2, r0
 8002498:	462b      	mov	r3, r5
 800249a:	4621      	mov	r1, r4
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f85c 	bl	800255a <_ZNSt6vectorIhSaIhEE13_M_assign_auxIPKhEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 80024a2:	68fb      	ldr	r3, [r7, #12]
      }
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}

080024ac <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f920 	bl	80026fa <_ZNSaIhED1Ev>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f8fe 	bl	80026d0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80024f6:	461a      	mov	r2, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8b6 	bl	800266a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ffd3 	bl	80024ac <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f8ec 	bl	8002712 <_ZSt8_DestroyIPhEvT_S1_>
    }
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_ZNSt6vectorIhSaIhEE13_M_assign_auxIPKhEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800255a:	b5b0      	push	{r4, r5, r7, lr}
 800255c:	b088      	sub	sp, #32
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68b8      	ldr	r0, [r7, #8]
 800256c:	f000 f8e8 	bl	8002740 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002570:	4603      	mov	r3, r0
 8002572:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f89b 	bl	80026b0 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 800257a:	4602      	mov	r2, r0
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4293      	cmp	r3, r2
 8002580:	bf8c      	ite	hi
 8002582:	2301      	movhi	r3, #1
 8002584:	2300      	movls	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02e      	beq.n	80025ea <_ZNSt6vectorIhSaIhEE13_M_assign_auxIPKhEEvT_S5_St20forward_iterator_tag+0x90>
	  {
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	69f9      	ldr	r1, [r7, #28]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f8e8 	bl	8002768 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIPKhEEPhjT_S6_>
 8002598:	61b8      	str	r0, [r7, #24]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681c      	ldr	r4, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ffb3 	bl	8002510 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80025aa:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80025ac:	461a      	mov	r2, r3
 80025ae:	4629      	mov	r1, r5
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7ff ffb8 	bl	8002526 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
			  - this->_M_impl._M_start);
 80025c0:	461a      	mov	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1ad3      	subs	r3, r2, r3
	    _M_deallocate(this->_M_impl._M_start,
 80025c8:	461a      	mov	r2, r3
 80025ca:	f000 f84e 	bl	800266a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	    this->_M_impl._M_start = __tmp;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	441a      	add	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]
	    this->_M_impl._M_finish =
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	  }
      }
 80025e8:	e03b      	b.n	8002662 <_ZNSt6vectorIhSaIhEE13_M_assign_auxIPKhEEvT_S5_St20forward_iterator_tag+0x108>
	else if (size() >= __len)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f850 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80025f0:	4602      	mov	r2, r0
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <_ZNSt6vectorIhSaIhEE13_M_assign_auxIPKhEEvT_S5_St20forward_iterator_tag+0xc2>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68b8      	ldr	r0, [r7, #8]
 800260c:	f000 f8e0 	bl	80027d0 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8c3 	bl	80027a0 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 800261a:	e022      	b.n	8002662 <_ZNSt6vectorIhSaIhEE13_M_assign_auxIPKhEEvT_S5_St20forward_iterator_tag+0x108>
	    _ForwardIterator __mid = __first;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	617b      	str	r3, [r7, #20]
	    std::advance(__mid, size());
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f835 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002626:	4602      	mov	r2, r0
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f8e6 	bl	8002800 <_ZSt7advanceIPKhjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8002634:	6979      	ldr	r1, [r7, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68b8      	ldr	r0, [r7, #8]
 800263e:	f000 f8c7 	bl	80027d0 <_ZSt4copyIPKhPhET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__mid, __last,
 8002642:	697c      	ldr	r4, [r7, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff60 	bl	8002510 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002650:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8002652:	462a      	mov	r2, r5
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4620      	mov	r0, r4
 8002658:	f000 f8e5 	bl	8002826 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 800265c:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]
      }
 8002662:	bf00      	nop
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bdb0      	pop	{r4, r5, r7, pc}

0800266a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
	if (__p)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f8e0 	bl	8002848 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8d8 	bl	800288e <_ZNSaIhEC1Ev>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
	{ }
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8cf 	bl	80028a6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8cc 	bl	80028bc <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800274a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ffec 	bl	800272c <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8002754:	462a      	mov	r2, r5
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	4620      	mov	r0, r4
 800275a:	f000 f8ba 	bl	80028d2 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800275e:	4603      	mov	r3, r0
    }
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bdb0      	pop	{r4, r5, r7, pc}

08002768 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIPKhEEPhjT_S6_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f873 	bl	8002866 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8002780:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fec3 	bl	8002510 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800278a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f848 	bl	8002826 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8002796:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685c      	ldr	r4, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fead 	bl	8002510 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	4621      	mov	r1, r4
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f7ff feb2 	bl	8002526 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]
      }
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f887 	bl	80028f0 <_ZSt12__miter_baseIPKhET_S2_>
 80027e2:	4604      	mov	r4, r0
 80027e4:	68b8      	ldr	r0, [r7, #8]
 80027e6:	f000 f883 	bl	80028f0 <_ZSt12__miter_baseIPKhET_S2_>
 80027ea:	4603      	mov	r3, r0
	       __result));
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4620      	mov	r0, r4
 80027f2:	f000 f888 	bl	8002906 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 80027f6:	4603      	mov	r3, r0
    }
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd90      	pop	{r4, r7, pc}

08002800 <_ZSt7advanceIPKhjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ff8c 	bl	800272c <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8002814:	4622      	mov	r2, r4
 8002816:	68f9      	ldr	r1, [r7, #12]
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f890 	bl	800293e <_ZSt9__advanceIPKhiEvRT_T0_St26random_access_iterator_tag>
    }
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f892 	bl	8002962 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 800283e:	4603      	mov	r3, r0
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f894 	bl	8002986 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f890 	bl	80029a0 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8002880:	4603      	mov	r3, r0
 8002882:	e000      	b.n	8002886 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8002884:	2300      	movs	r3, #0
      }
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8ae 	bl	80029f8 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
    }
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_ZSt12__miter_baseIPKhET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002906:	b5b0      	push	{r4, r5, r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f87b 	bl	8002a0e <_ZSt12__niter_baseIPKhET_S2_>
 8002918:	4604      	mov	r4, r0
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f000 f877 	bl	8002a0e <_ZSt12__niter_baseIPKhET_S2_>
 8002920:	4605      	mov	r5, r0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f85d 	bl	80029e2 <_ZSt12__niter_baseIPhET_S1_>
 8002928:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800292a:	461a      	mov	r2, r3
 800292c:	4629      	mov	r1, r5
 800292e:	4620      	mov	r0, r4
 8002930:	f000 f845 	bl	80029be <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8002934:	4603      	mov	r3, r0
    }
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bdb0      	pop	{r4, r5, r7, pc}

0800293e <_ZSt9__advanceIPKhiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	713a      	strb	r2, [r7, #4]
      __i += __n;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	441a      	add	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]
    }
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f854 	bl	8002a24 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 800297c:	4603      	mov	r3, r0
    }
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002992:	68b8      	ldr	r0, [r7, #8]
 8002994:	f000 fde4 	bl	8003560 <_ZdlPv>
      }
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80029aa:	2200      	movs	r2, #0
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f848 	bl	8002a44 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f852 	bl	8002a7c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80029d8:	4603      	mov	r3, r0
    }
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff fecb 	bl	80027d0 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f82d 	bl	8002ab0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	bf8c      	ite	hi
 8002a5e:	2301      	movhi	r3, #1
 8002a60:	2300      	movls	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002a68:	f000 fd8d 	bl	8003586 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f000 fd5d 	bl	800352c <_Znwj>
 8002a72:	4603      	mov	r3, r0
      }
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68f9      	ldr	r1, [r7, #12]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fdc2 	bl	8003626 <memmove>
	  return __result + _Num;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
	}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <_ZN5EnemyD1Ev>:
	virtual void shot() override;
	virtual void movement() override;
};

class Enemy : public Entity {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <_ZN5EnemyD1Ev+0x20>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fb63 	bl	80021a4 <_ZN6EntityD1Ev>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	0800389c 	.word	0x0800389c

08002aec <_ZN5EnemyD0Ev>:
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ffe7 	bl	8002ac8 <_ZN5EnemyD1Ev>
 8002afa:	2118      	movs	r1, #24
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fd13 	bl	8003528 <_ZdlPvj>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a3e      	ldr	r2, [pc, #248]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a37      	ldr	r2, [pc, #220]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a30      	ldr	r2, [pc, #192]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <MX_GPIO_Init+0x118>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|DC_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f24e 0101 	movw	r1, #57345	; 0xe001
 8002bb4:	481c      	ldr	r0, [pc, #112]	; (8002c28 <MX_GPIO_Init+0x11c>)
 8002bb6:	f7fe fb55 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bc0:	481a      	ldr	r0, [pc, #104]	; (8002c2c <MX_GPIO_Init+0x120>)
 8002bc2:	f7fe fb4f 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CE_Pin|DC_Pin|RST_Pin|BL_Pin;
 8002bc6:	f24e 0301 	movw	r3, #57345	; 0xe001
 8002bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4812      	ldr	r0, [pc, #72]	; (8002c28 <MX_GPIO_Init+0x11c>)
 8002be0:	f7fe f9a6 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002be4:	2304      	movs	r3, #4
 8002be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480e      	ldr	r0, [pc, #56]	; (8002c30 <MX_GPIO_Init+0x124>)
 8002bf8:	f7fe f99a 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8002bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <MX_GPIO_Init+0x120>)
 8002c16:	f7fe f98b 	bl	8000f30 <HAL_GPIO_Init>

}
 8002c1a:	bf00      	nop
 8002c1c:	3728      	adds	r7, #40	; 0x28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40020000 	.word	0x40020000

08002c34 <_ZN8Joystick11getJoystickEv>:
#include "joystick.hpp"

	void Joystick::getJoystick(){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
		HAL_ADC_Start(&hadc1);
 8002c3c:	4817      	ldr	r0, [pc, #92]	; (8002c9c <_ZN8Joystick11getJoystickEv+0x68>)
 8002c3e:	f7fd fd1b 	bl	8000678 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8002c42:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <_ZN8Joystick11getJoystickEv+0x6c>)
 8002c44:	f7fd fd18 	bl	8000678 <HAL_ADC_Start>

		if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8002c48:	210a      	movs	r1, #10
 8002c4a:	4814      	ldr	r0, [pc, #80]	; (8002c9c <_ZN8Joystick11getJoystickEv+0x68>)
 8002c4c:	f7fd fdda 	bl	8000804 <HAL_ADC_PollForConversion>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <_ZN8Joystick11getJoystickEv+0x3a>
			{
				value = HAL_ADC_GetValue(&hadc1);
 8002c60:	480e      	ldr	r0, [pc, #56]	; (8002c9c <_ZN8Joystick11getJoystickEv+0x68>)
 8002c62:	f7fd fe53 	bl	800090c <HAL_ADC_GetValue>
 8002c66:	4603      	mov	r3, r0
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	801a      	strh	r2, [r3, #0]
			}
				if(HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 8002c6e:	210a      	movs	r1, #10
 8002c70:	480b      	ldr	r0, [pc, #44]	; (8002ca0 <_ZN8Joystick11getJoystickEv+0x6c>)
 8002c72:	f7fd fdc7 	bl	8000804 <HAL_ADC_PollForConversion>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <_ZN8Joystick11getJoystickEv+0x60>
			{
				value2 = HAL_ADC_GetValue(&hadc2);
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <_ZN8Joystick11getJoystickEv+0x6c>)
 8002c88:	f7fd fe40 	bl	800090c <HAL_ADC_GetValue>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	805a      	strh	r2, [r3, #2]
			}
	}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200000ec 	.word	0x200000ec
 8002ca0:	200000a4 	.word	0x200000a4

08002ca4 <_Z13display_setupP14display_config>:
#include "display.h"

void display_setup(struct display_config * cfg)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    // Sprzŕtowy reset wyťwietlacza
    HAL_GPIO_WritePin(cfg->reset_port, cfg->reset_pin, GPIO_PIN_RESET);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6858      	ldr	r0, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	891b      	ldrh	r3, [r3, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fe fad4 	bl	8001264 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002cbc:	2064      	movs	r0, #100	; 0x64
 8002cbe:	f7fd fc75 	bl	80005ac <HAL_Delay>
    HAL_GPIO_WritePin(cfg->reset_port, cfg->reset_pin, GPIO_PIN_SET);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6858      	ldr	r0, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	891b      	ldrh	r3, [r3, #8]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7fe fac9 	bl	8001264 <HAL_GPIO_WritePin>

    // W│╣czenie podťwietlenia
    HAL_GPIO_WritePin(cfg->bl_port, cfg->bl_pin, GPIO_PIN_SET);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68d8      	ldr	r0, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8a1b      	ldrh	r3, [r3, #16]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fe fac1 	bl	8001264 <HAL_GPIO_WritePin>

    // Przejťcie w tryb polece˝ rozszerzonych
    // 0x00100001 (0x21) - polecenie
    display_write_cmd(cfg, 0x21);
 8002ce2:	2121      	movs	r1, #33	; 0x21
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f853 	bl	8002d90 <_Z17display_write_cmdP14display_configh>

    // Temperature Coefficient
    // 0b00000100 (0x04) - polecenie | 0b00000000 (0x00) - wartoťŠ
    // = 0b00000100 (0x04)
    display_write_cmd(cfg, 0x04);
 8002cea:	2104      	movs	r1, #4
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f84f 	bl	8002d90 <_Z17display_write_cmdP14display_configh>

    // Bias System
    // 0b00010000 (0x10) - polecenie | 0x00000100 (0x04) - wartoťŠ
    // = 0b00010100 (0x14)
    display_write_cmd(cfg, 0x10 | 0x04);
 8002cf2:	2114      	movs	r1, #20
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f84b 	bl	8002d90 <_Z17display_write_cmdP14display_configh>

    // Ustawienie napiŕcia sygna│u steruj╣cego matryc╣ LCD / kontrastu
    // 0b10000000 (0x80) - polecenie | 0x01001000 (0x38) - wartoťŠ
    // = 0x11001000 (0xB8)
    display_write_cmd(cfg, 0x80 | 0x38);
 8002cfa:	21b8      	movs	r1, #184	; 0xb8
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f847 	bl	8002d90 <_Z17display_write_cmdP14display_configh>

    // Powrˇt do trybu polece˝ podstawowych
    // 0x00100001 (0x20) - polecenie
    display_write_cmd(cfg, 0x20);
 8002d02:	2120      	movs	r1, #32
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f843 	bl	8002d90 <_Z17display_write_cmdP14display_configh>
    // Ustawienie trybu pracy wyťwietlacza - normalnego
    // 0x00001000 (0x08) - polecenie | 0b00000100 (0x04) - wartoťŠ
    // = 0b00001100 (0x0C)
    // Pozosta│e tryby pracy: ca│y wy│╣czony - 0b00000000 (0x00);
    // ca│y zapalony - 0x00000001 (0x01); odwrˇcony - 0x00000101 (0x05)
    display_write_cmd(cfg, 0x08 | 0x04);
 8002d0a:	210c      	movs	r1, #12
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f83f 	bl	8002d90 <_Z17display_write_cmdP14display_configh>

    // Czyszczenie wyťwietlacza
    for (int i = 0; i < 504; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002d1c:	da07      	bge.n	8002d2e <_Z13display_setupP14display_config+0x8a>
        display_write_data(cfg, 0x00);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f85e 	bl	8002de2 <_Z18display_write_dataP14display_configh>
    for (int i = 0; i < 504; i++)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e7f3      	b.n	8002d16 <_Z13display_setupP14display_config+0x72>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_Z15display_set_dxyP14display_config17display_directionhh>:

void display_set_dxy(struct display_config * cfg,
                     enum display_direction direction,
                     uint8_t column, uint8_t row)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	4608      	mov	r0, r1
 8002d40:	4611      	mov	r1, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	4603      	mov	r3, r0
 8002d46:	70fb      	strb	r3, [r7, #3]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70bb      	strb	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
    // Przejťcie w tryb polece˝ podstawowych i ustawienie kierunku rysowania
    if(direction == vertical)
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d104      	bne.n	8002d60 <_Z15display_set_dxyP14display_config17display_directionhh+0x2a>
        display_write_cmd(cfg, 0x20 | 0x02);
 8002d56:	2122      	movs	r1, #34	; 0x22
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f819 	bl	8002d90 <_Z17display_write_cmdP14display_configh>
 8002d5e:	e003      	b.n	8002d68 <_Z15display_set_dxyP14display_config17display_directionhh+0x32>
    else
        display_write_cmd(cfg, 0x20 | 0x00);
 8002d60:	2120      	movs	r1, #32
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f814 	bl	8002d90 <_Z17display_write_cmdP14display_configh>

    display_write_cmd(cfg, 0x80 | column); // Wybˇr kolumny
 8002d68:	78bb      	ldrb	r3, [r7, #2]
 8002d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f80c 	bl	8002d90 <_Z17display_write_cmdP14display_configh>
    display_write_cmd(cfg, 0x40 | row); // Wybˇr wiersza
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f804 	bl	8002d90 <_Z17display_write_cmdP14display_configh>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_Z17display_write_cmdP14display_configh>:

void display_write_cmd(struct display_config * cfg, uint8_t cmd) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
    // Wybˇr tryby transmisji polece˝
    HAL_GPIO_WritePin(cfg->dc_port, cfg->dc_pin, GPIO_PIN_RESET);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6958      	ldr	r0, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8c1b      	ldrh	r3, [r3, #32]
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7fe fa5c 	bl	8001264 <HAL_GPIO_WritePin>

    // Odblokowanie wejťcia zegarowego
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_RESET);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69d8      	ldr	r0, [r3, #28]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8b1b      	ldrh	r3, [r3, #24]
 8002db4:	2200      	movs	r2, #0
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fe fa54 	bl	8001264 <HAL_GPIO_WritePin>
    // Transmisja danych interfejsem SPI
    HAL_SPI_Transmit(cfg->spi, &cmd, 1, 100);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	1cf9      	adds	r1, r7, #3
 8002dc2:	2364      	movs	r3, #100	; 0x64
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f7fe fef9 	bl	8001bbc <HAL_SPI_Transmit>
    // Blokada wejťcia zegarowego
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_SET);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69d8      	ldr	r0, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8b1b      	ldrh	r3, [r3, #24]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7fe fa45 	bl	8001264 <HAL_GPIO_WritePin>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_Z18display_write_dataP14display_configh>:

void display_write_data(struct display_config * cfg, uint8_t data) {
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
    // Wybˇr tryby transmisji polece˝
    HAL_GPIO_WritePin(cfg->dc_port, cfg->dc_pin, GPIO_PIN_SET);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6958      	ldr	r0, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8c1b      	ldrh	r3, [r3, #32]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fe fa33 	bl	8001264 <HAL_GPIO_WritePin>

    // Odblokowanie wejťcia zegarowego
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_RESET);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69d8      	ldr	r0, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8b1b      	ldrh	r3, [r3, #24]
 8002e06:	2200      	movs	r2, #0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fe fa2b 	bl	8001264 <HAL_GPIO_WritePin>
    // Transmisja danych interfejsem SPI
    HAL_SPI_Transmit(cfg->spi, &data, 1, 100);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	1cf9      	adds	r1, r7, #3
 8002e14:	2364      	movs	r3, #100	; 0x64
 8002e16:	2201      	movs	r2, #1
 8002e18:	f7fe fed0 	bl	8001bbc <HAL_SPI_Transmit>
    // Blokada wejťcia zegarowego
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_SET);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69d8      	ldr	r0, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8b1b      	ldrh	r3, [r3, #24]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4619      	mov	r1, r3
 8002e28:	f7fe fa1c 	bl	8001264 <HAL_GPIO_WritePin>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_Z5setXY8JoystickP6Player>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setXY(Joystick j, Player *p){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	if (j.value < 1000 && p->positionX > 0) p->setX(p->positionX-1);
 8002e3e:	88bb      	ldrh	r3, [r7, #4]
 8002e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e44:	d20d      	bcs.n	8002e62 <_Z5setXY8JoystickP6Player+0x2e>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	791b      	ldrb	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <_Z5setXY8JoystickP6Player+0x2e>
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	791b      	ldrb	r3, [r3, #4]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7ff f9e8 	bl	8002230 <_ZN6Entity4setXEh>
 8002e60:	e016      	b.n	8002e90 <_Z5setXY8JoystickP6Player+0x5c>
	else if (j.value > 3000 && p->positionX < 84-p->width) p->setX(p->positionX+1);
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d911      	bls.n	8002e90 <_Z5setXY8JoystickP6Player+0x5c>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	79db      	ldrb	r3, [r3, #7]
 8002e76:	f1c3 0354 	rsb	r3, r3, #84	; 0x54
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	da08      	bge.n	8002e90 <_Z5setXY8JoystickP6Player+0x5c>
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	3301      	adds	r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7ff f9d0 	bl	8002230 <_ZN6Entity4setXEh>
	if (j.value2 < 1000 && p->positionY > 0) p->setY(p->positionY-1);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e96:	d20d      	bcs.n	8002eb4 <_Z5setXY8JoystickP6Player+0x80>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <_Z5setXY8JoystickP6Player+0x80>
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	795b      	ldrb	r3, [r3, #5]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7ff f9ce 	bl	800224e <_ZN6Entity4setYEh>
	else if (j.value2 > 3000 && p->positionY < 48-p->height) p->setY(p->positionY+1);
}
 8002eb2:	e016      	b.n	8002ee2 <_Z5setXY8JoystickP6Player+0xae>
	else if (j.value2 > 3000 && p->positionY < 48-p->height) p->setY(p->positionY+1);
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d911      	bls.n	8002ee2 <_Z5setXY8JoystickP6Player+0xae>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	795b      	ldrb	r3, [r3, #5]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	799b      	ldrb	r3, [r3, #6]
 8002ec8:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	da08      	bge.n	8002ee2 <_Z5setXY8JoystickP6Player+0xae>
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	795b      	ldrb	r3, [r3, #5]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f7ff f9b6 	bl	800224e <_ZN6Entity4setYEh>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b0c5      	sub	sp, #276	; 0x114
 8002ef0:	af1c      	add	r7, sp, #112	; 0x70
  /* USER CODE BEGIN 1 */
	Joystick l;
	Screen s;
	//Player p;
	//Enemy e;
	Player * p = new Player();
 8002ef2:	2018      	movs	r0, #24
 8002ef4:	f000 fb1a 	bl	800352c <_Znwj>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461c      	mov	r4, r3
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff f9b5 	bl	800226c <_ZN6PlayerC1Ev>
 8002f02:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
	Enemy * e = new Enemy();
 8002f06:	2018      	movs	r0, #24
 8002f08:	f000 fb10 	bl	800352c <_Znwj>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461c      	mov	r4, r3
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff f9f3 	bl	80022fc <_ZN5EnemyC1Ev>
 8002f16:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98

//	Enemy c(40,0,8,11,5,{0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0x3C, 0x18});
	Construction c;
 8002f1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fa34 	bl	800238c <_ZN12ConstructionC1Ev>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f24:	f7fd fad0 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f28:	f000 f864 	bl	8002ff4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f2c:	f7ff fdee 	bl	8002b0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002f30:	f7ff f824 	bl	8001f7c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002f34:	f7ff f85c 	bl	8001ff0 <MX_ADC2_Init>
  MX_SPI2_Init();
 8002f38:	f000 f972 	bl	8003220 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  	struct display_config cfg;
	cfg.spi = &hspi2;
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <main+0x100>)
 8002f3e:	607b      	str	r3, [r7, #4]
	cfg.reset_port = RST_GPIO_Port;
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <main+0x104>)
 8002f42:	60bb      	str	r3, [r7, #8]
	cfg.reset_pin = RST_Pin;
 8002f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f48:	81bb      	strh	r3, [r7, #12]
	cfg.bl_port = BL_GPIO_Port;
 8002f4a:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <main+0x104>)
 8002f4c:	613b      	str	r3, [r7, #16]
	cfg.bl_pin = BL_Pin;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	82bb      	strh	r3, [r7, #20]
	cfg.dc_port = DC_GPIO_Port;
 8002f52:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <main+0x104>)
 8002f54:	61bb      	str	r3, [r7, #24]
	cfg.dc_pin = DC_Pin;
 8002f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
	cfg.ce_port = CE_GPIO_Port;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <main+0x104>)
 8002f5e:	623b      	str	r3, [r7, #32]
	cfg.ce_pin = CE_Pin;
 8002f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f64:	83bb      	strh	r3, [r7, #28]
	display_setup(&cfg);
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe9b 	bl	8002ca4 <_Z13display_setupP14display_config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  l.getJoystick();
 8002f6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fe5e 	bl	8002c34 <_ZN8Joystick11getJoystickEv>
	  setXY(l,p);
 8002f78:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002f7c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002f80:	f7ff ff58 	bl	8002e34 <_Z5setXY8JoystickP6Player>
	  s.clear(cfg);
 8002f84:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002f88:	4668      	mov	r0, sp
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	226c      	movs	r2, #108	; 0x6c
 8002f90:	4619      	mov	r1, r3
 8002f92:	f000 fb3d 	bl	8003610 <memcpy>
 8002f96:	1d3b      	adds	r3, r7, #4
 8002f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 f910 	bl	80031c0 <_ZN6Screen5clearE14display_config>
	  s.display(cfg, p);
 8002fa0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fa8:	931b      	str	r3, [sp, #108]	; 0x6c
 8002faa:	4668      	mov	r0, sp
 8002fac:	f107 0310 	add.w	r3, r7, #16
 8002fb0:	226c      	movs	r2, #108	; 0x6c
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f000 fb2c 	bl	8003610 <memcpy>
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 f894 	bl	80030ea <_ZN6Screen7displayE14display_configP6Entity>
	  s.display(cfg, e);
 8002fc2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fca:	931b      	str	r3, [sp, #108]	; 0x6c
 8002fcc:	4668      	mov	r0, sp
 8002fce:	f107 0310 	add.w	r3, r7, #16
 8002fd2:	226c      	movs	r2, #108	; 0x6c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f000 fb1b 	bl	8003610 <memcpy>
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 f883 	bl	80030ea <_ZN6Screen7displayE14display_configP6Entity>
	  //s.display(cfg, c*);
	  HAL_Delay(20);
 8002fe4:	2014      	movs	r0, #20
 8002fe6:	f7fd fae1 	bl	80005ac <HAL_Delay>
	  l.getJoystick();
 8002fea:	e7c0      	b.n	8002f6e <main+0x82>
 8002fec:	20000134 	.word	0x20000134
 8002ff0:	40020800 	.word	0x40020800

08002ff4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b094      	sub	sp, #80	; 0x50
 8002ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffa:	f107 0320 	add.w	r3, r7, #32
 8002ffe:	2230      	movs	r2, #48	; 0x30
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fb28 	bl	8003658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <_Z18SystemClock_Configv+0xe0>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	4a2c      	ldr	r2, [pc, #176]	; (80030d4 <_Z18SystemClock_Configv+0xe0>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6413      	str	r3, [r2, #64]	; 0x40
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <_Z18SystemClock_Configv+0xe0>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003034:	2300      	movs	r3, #0
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <_Z18SystemClock_Configv+0xe4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <_Z18SystemClock_Configv+0xe4>)
 800303e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <_Z18SystemClock_Configv+0xe4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003050:	2301      	movs	r3, #1
 8003052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800305a:	2302      	movs	r3, #2
 800305c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800305e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003064:	2304      	movs	r3, #4
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003068:	23a8      	movs	r3, #168	; 0xa8
 800306a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800306c:	2302      	movs	r3, #2
 800306e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003070:	2304      	movs	r3, #4
 8003072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003074:	f107 0320 	add.w	r3, r7, #32
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe f90d 	bl	8001298 <HAL_RCC_OscConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800308e:	f000 f825 	bl	80030dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003092:	230f      	movs	r3, #15
 8003094:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003096:	2302      	movs	r3, #2
 8003098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800309e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030aa:	f107 030c 	add.w	r3, r7, #12
 80030ae:	2105      	movs	r1, #5
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fb61 	bl	8001778 <HAL_RCC_ClockConfig>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80030c6:	f000 f809 	bl	80030dc <Error_Handler>
  }
}
 80030ca:	bf00      	nop
 80030cc:	3750      	adds	r7, #80	; 0x50
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40007000 	.word	0x40007000

080030dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_ZN6Screen7displayE14display_configP6Entity>:
#include "screen.hpp"

void Screen::display(display_config cfg, Entity* p) {
 80030ea:	b084      	sub	sp, #16
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t row  = p->positionY/8;
 80030fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003100:	795b      	ldrb	r3, [r3, #5]
 8003102:	08db      	lsrs	r3, r3, #3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	817b      	strh	r3, [r7, #10]
	uint8_t up = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
	uint8_t down = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	75bb      	strb	r3, [r7, #22]

	for (int i = 0; i < p->width; i++) {
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003118:	79db      	ldrb	r3, [r3, #7]
 800311a:	461a      	mov	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4293      	cmp	r3, r2
 8003120:	da47      	bge.n	80031b2 <_ZN6Screen7displayE14display_configP6Entity+0xc8>
		display_set_dxy(&cfg, vertical, p->positionX+i, row);
 8003122:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003126:	791a      	ldrb	r2, [r3, #4]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4413      	add	r3, r2
 800312e:	b2da      	uxtb	r2, r3
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003138:	2101      	movs	r1, #1
 800313a:	f7ff fdfc 	bl	8002d36 <_Z15display_set_dxyP14display_config17display_directionhh>

		down=0;
 800313e:	2300      	movs	r3, #0
 8003140:	75bb      	strb	r3, [r7, #22]
		up = p->displayVector[i];
 8003142:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003146:	330c      	adds	r3, #12
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f857 	bl	8003200 <_ZNSt6vectorIhSaIhEEixEj>
 8003152:	4603      	mov	r3, r0
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < p->positionY%8; j++) {
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003160:	795b      	ldrb	r3, [r3, #5]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	da10      	bge.n	800318e <_ZN6Screen7displayE14display_configP6Entity+0xa4>
			down = down << 1;
 800316c:	7dbb      	ldrb	r3, [r7, #22]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	75bb      	strb	r3, [r7, #22]
		  	if (up>127) {
 8003172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da02      	bge.n	8003180 <_ZN6Screen7displayE14display_configP6Entity+0x96>
		  		down+=1;
 800317a:	7dbb      	ldrb	r3, [r7, #22]
 800317c:	3301      	adds	r3, #1
 800317e:	75bb      	strb	r3, [r7, #22]
		  		}
		  	up = up << 1;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < p->positionY%8; j++) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e7e6      	b.n	800315c <_ZN6Screen7displayE14display_configP6Entity+0x72>
		  }
		  display_write_data(&cfg, up);
 800318e:	7dfa      	ldrb	r2, [r7, #23]
 8003190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fe23 	bl	8002de2 <_Z18display_write_dataP14display_configh>
		  display_write_data(&cfg, down);
 800319c:	7dba      	ldrb	r2, [r7, #22]
 800319e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fe1c 	bl	8002de2 <_Z18display_write_dataP14display_configh>
	for (int i = 0; i < p->width; i++) {
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e7b0      	b.n	8003114 <_ZN6Screen7displayE14display_configP6Entity+0x2a>
	}
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031bc:	b004      	add	sp, #16
 80031be:	4770      	bx	lr

080031c0 <_ZN6Screen5clearE14display_config>:
			  display_write_data(&cfg, toAdd);
	}
}


void Screen::clear(display_config cfg) {
 80031c0:	b084      	sub	sp, #16
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	f107 001c 	add.w	r0, r7, #28
 80031ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for (int i = 0; i < 504; i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80031dc:	da09      	bge.n	80031f2 <_ZN6Screen5clearE14display_config+0x32>
			display_write_data(&cfg, 0x00);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fdfc 	bl	8002de2 <_Z18display_write_dataP14display_configh>
	for (int i = 0; i < 504; i++)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e7f1      	b.n	80031d6 <_ZN6Screen5clearE14display_config+0x16>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031fc:	b004      	add	sp, #16
 80031fe:	4770      	bx	lr

08003200 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4413      	add	r3, r2
      }
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <MX_SPI2_Init+0x64>)
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <MX_SPI2_Init+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <MX_SPI2_Init+0x64>)
 800322c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003230:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <MX_SPI2_Init+0x64>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <MX_SPI2_Init+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_SPI2_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <MX_SPI2_Init+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <MX_SPI2_Init+0x64>)
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <MX_SPI2_Init+0x64>)
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <MX_SPI2_Init+0x64>)
 800325a:	2200      	movs	r2, #0
 800325c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <MX_SPI2_Init+0x64>)
 8003260:	2200      	movs	r2, #0
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <MX_SPI2_Init+0x64>)
 8003266:	2200      	movs	r2, #0
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <MX_SPI2_Init+0x64>)
 800326c:	220a      	movs	r2, #10
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003270:	4804      	ldr	r0, [pc, #16]	; (8003284 <MX_SPI2_Init+0x64>)
 8003272:	f7fe fc3f 	bl	8001af4 <HAL_SPI_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800327c:	f7ff ff2e 	bl	80030dc <Error_Handler>
  }

}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000134 	.word	0x20000134
 8003288:	40003800 	.word	0x40003800

0800328c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <HAL_SPI_MspInit+0xc0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d14a      	bne.n	8003344 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_SPI_MspInit+0xc4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003302:	2308      	movs	r3, #8
 8003304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330e:	2303      	movs	r3, #3
 8003310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003312:	2305      	movs	r3, #5
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003316:	f107 0314 	add.w	r3, r7, #20
 800331a:	4619      	mov	r1, r3
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <HAL_SPI_MspInit+0xc8>)
 800331e:	f7fd fe07 	bl	8000f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8003322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003334:	2305      	movs	r3, #5
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	4619      	mov	r1, r3
 800333e:	4806      	ldr	r0, [pc, #24]	; (8003358 <HAL_SPI_MspInit+0xcc>)
 8003340:	f7fd fdf6 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003344:	bf00      	nop
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40003800 	.word	0x40003800
 8003350:	40023800 	.word	0x40023800
 8003354:	40020800 	.word	0x40020800
 8003358:	40020400 	.word	0x40020400

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_MspInit+0x4c>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <HAL_MspInit+0x4c>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_MspInit+0x4c>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_MspInit+0x4c>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <HAL_MspInit+0x4c>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_MspInit+0x4c>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800

080033ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <HardFault_Handler+0x4>

080033c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <MemManage_Handler+0x4>

080033c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <BusFault_Handler+0x4>

080033cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <UsageFault_Handler+0x4>

080033d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003400:	f7fd f8b4 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	return 1;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_kill>:

int _kill(int pid, int sig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003422:	f000 f8bb 	bl	800359c <__errno>
 8003426:	4602      	mov	r2, r0
 8003428:	2316      	movs	r3, #22
 800342a:	6013      	str	r3, [r2, #0]
	return -1;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_exit>:

void _exit (int status)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ffe7 	bl	8003418 <_kill>
	while (1) {}		/* Make sure we hang here */
 800344a:	e7fe      	b.n	800344a <_exit+0x12>

0800344c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <_sbrk+0x50>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <_sbrk+0x16>
		heap_end = &end;
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <_sbrk+0x50>)
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <_sbrk+0x54>)
 8003460:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <_sbrk+0x50>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <_sbrk+0x50>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	466a      	mov	r2, sp
 8003472:	4293      	cmp	r3, r2
 8003474:	d907      	bls.n	8003486 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003476:	f000 f891 	bl	800359c <__errno>
 800347a:	4602      	mov	r2, r0
 800347c:	230c      	movs	r3, #12
 800347e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	e006      	b.n	8003494 <_sbrk+0x48>
	}

	heap_end += incr;
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <_sbrk+0x50>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	4a03      	ldr	r2, [pc, #12]	; (800349c <_sbrk+0x50>)
 8003490:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000090 	.word	0x20000090
 80034a0:	20000190 	.word	0x20000190

080034a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <SystemInit+0x28>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <SystemInit+0x28>)
 80034b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <SystemInit+0x28>)
 80034ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034be:	609a      	str	r2, [r3, #8]
#endif
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034d6:	e003      	b.n	80034e0 <LoopCopyDataInit>

080034d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034de:	3104      	adds	r1, #4

080034e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034e0:	480b      	ldr	r0, [pc, #44]	; (8003510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034e8:	d3f6      	bcc.n	80034d8 <CopyDataInit>
  ldr  r2, =_sbss
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034ec:	e002      	b.n	80034f4 <LoopFillZerobss>

080034ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034f0:	f842 3b04 	str.w	r3, [r2], #4

080034f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034f8:	d3f9      	bcc.n	80034ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034fa:	f7ff ffd3 	bl	80034a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034fe:	f000 f853 	bl	80035a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003502:	f7ff fcf3 	bl	8002eec <main>
  bx  lr    
 8003506:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003508:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800350c:	08003924 	.word	0x08003924
  ldr  r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003514:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003518:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800351c:	20000190 	.word	0x20000190

08003520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003520:	e7fe      	b.n	8003520 <ADC_IRQHandler>

08003522 <__cxa_pure_virtual>:
 8003522:	b508      	push	{r3, lr}
 8003524:	f000 f82a 	bl	800357c <_ZSt9terminatev>

08003528 <_ZdlPvj>:
 8003528:	f000 b81a 	b.w	8003560 <_ZdlPv>

0800352c <_Znwj>:
 800352c:	b510      	push	{r4, lr}
 800352e:	2800      	cmp	r0, #0
 8003530:	bf14      	ite	ne
 8003532:	4604      	movne	r4, r0
 8003534:	2401      	moveq	r4, #1
 8003536:	4620      	mov	r0, r4
 8003538:	f000 f85a 	bl	80035f0 <malloc>
 800353c:	b930      	cbnz	r0, 800354c <_Znwj+0x20>
 800353e:	f000 f807 	bl	8003550 <_ZSt15get_new_handlerv>
 8003542:	b908      	cbnz	r0, 8003548 <_Znwj+0x1c>
 8003544:	f000 f822 	bl	800358c <abort>
 8003548:	4780      	blx	r0
 800354a:	e7f4      	b.n	8003536 <_Znwj+0xa>
 800354c:	bd10      	pop	{r4, pc}
	...

08003550 <_ZSt15get_new_handlerv>:
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <_ZSt15get_new_handlerv+0xc>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f3bf 8f5b 	dmb	ish
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000094 	.word	0x20000094

08003560 <_ZdlPv>:
 8003560:	f000 b84e 	b.w	8003600 <free>

08003564 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003564:	b508      	push	{r3, lr}
 8003566:	4780      	blx	r0
 8003568:	f000 f810 	bl	800358c <abort>

0800356c <_ZSt13get_terminatev>:
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <_ZSt13get_terminatev+0xc>)
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	f3bf 8f5b 	dmb	ish
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <_ZSt9terminatev>:
 800357c:	b508      	push	{r3, lr}
 800357e:	f7ff fff5 	bl	800356c <_ZSt13get_terminatev>
 8003582:	f7ff ffef 	bl	8003564 <_ZN10__cxxabiv111__terminateEPFvvE>

08003586 <_ZSt17__throw_bad_allocv>:
 8003586:	b508      	push	{r3, lr}
 8003588:	f000 f800 	bl	800358c <abort>

0800358c <abort>:
 800358c:	b508      	push	{r3, lr}
 800358e:	2006      	movs	r0, #6
 8003590:	f000 f94a 	bl	8003828 <raise>
 8003594:	2001      	movs	r0, #1
 8003596:	f7ff ff4f 	bl	8003438 <_exit>
	...

0800359c <__errno>:
 800359c:	4b01      	ldr	r3, [pc, #4]	; (80035a4 <__errno+0x8>)
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000010 	.word	0x20000010

080035a8 <__libc_init_array>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	4e0d      	ldr	r6, [pc, #52]	; (80035e0 <__libc_init_array+0x38>)
 80035ac:	4c0d      	ldr	r4, [pc, #52]	; (80035e4 <__libc_init_array+0x3c>)
 80035ae:	1ba4      	subs	r4, r4, r6
 80035b0:	10a4      	asrs	r4, r4, #2
 80035b2:	2500      	movs	r5, #0
 80035b4:	42a5      	cmp	r5, r4
 80035b6:	d109      	bne.n	80035cc <__libc_init_array+0x24>
 80035b8:	4e0b      	ldr	r6, [pc, #44]	; (80035e8 <__libc_init_array+0x40>)
 80035ba:	4c0c      	ldr	r4, [pc, #48]	; (80035ec <__libc_init_array+0x44>)
 80035bc:	f000 f952 	bl	8003864 <_init>
 80035c0:	1ba4      	subs	r4, r4, r6
 80035c2:	10a4      	asrs	r4, r4, #2
 80035c4:	2500      	movs	r5, #0
 80035c6:	42a5      	cmp	r5, r4
 80035c8:	d105      	bne.n	80035d6 <__libc_init_array+0x2e>
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
 80035cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d0:	4798      	blx	r3
 80035d2:	3501      	adds	r5, #1
 80035d4:	e7ee      	b.n	80035b4 <__libc_init_array+0xc>
 80035d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035da:	4798      	blx	r3
 80035dc:	3501      	adds	r5, #1
 80035de:	e7f2      	b.n	80035c6 <__libc_init_array+0x1e>
 80035e0:	0800391c 	.word	0x0800391c
 80035e4:	0800391c 	.word	0x0800391c
 80035e8:	0800391c 	.word	0x0800391c
 80035ec:	08003920 	.word	0x08003920

080035f0 <malloc>:
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <malloc+0xc>)
 80035f2:	4601      	mov	r1, r0
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	f000 b885 	b.w	8003704 <_malloc_r>
 80035fa:	bf00      	nop
 80035fc:	20000010 	.word	0x20000010

08003600 <free>:
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <free+0xc>)
 8003602:	4601      	mov	r1, r0
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f000 b82f 	b.w	8003668 <_free_r>
 800360a:	bf00      	nop
 800360c:	20000010 	.word	0x20000010

08003610 <memcpy>:
 8003610:	b510      	push	{r4, lr}
 8003612:	1e43      	subs	r3, r0, #1
 8003614:	440a      	add	r2, r1
 8003616:	4291      	cmp	r1, r2
 8003618:	d100      	bne.n	800361c <memcpy+0xc>
 800361a:	bd10      	pop	{r4, pc}
 800361c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003624:	e7f7      	b.n	8003616 <memcpy+0x6>

08003626 <memmove>:
 8003626:	4288      	cmp	r0, r1
 8003628:	b510      	push	{r4, lr}
 800362a:	eb01 0302 	add.w	r3, r1, r2
 800362e:	d807      	bhi.n	8003640 <memmove+0x1a>
 8003630:	1e42      	subs	r2, r0, #1
 8003632:	4299      	cmp	r1, r3
 8003634:	d00a      	beq.n	800364c <memmove+0x26>
 8003636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800363a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800363e:	e7f8      	b.n	8003632 <memmove+0xc>
 8003640:	4283      	cmp	r3, r0
 8003642:	d9f5      	bls.n	8003630 <memmove+0xa>
 8003644:	1881      	adds	r1, r0, r2
 8003646:	1ad2      	subs	r2, r2, r3
 8003648:	42d3      	cmn	r3, r2
 800364a:	d100      	bne.n	800364e <memmove+0x28>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003652:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003656:	e7f7      	b.n	8003648 <memmove+0x22>

08003658 <memset>:
 8003658:	4402      	add	r2, r0
 800365a:	4603      	mov	r3, r0
 800365c:	4293      	cmp	r3, r2
 800365e:	d100      	bne.n	8003662 <memset+0xa>
 8003660:	4770      	bx	lr
 8003662:	f803 1b01 	strb.w	r1, [r3], #1
 8003666:	e7f9      	b.n	800365c <memset+0x4>

08003668 <_free_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4605      	mov	r5, r0
 800366c:	2900      	cmp	r1, #0
 800366e:	d045      	beq.n	80036fc <_free_r+0x94>
 8003670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003674:	1f0c      	subs	r4, r1, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfb8      	it	lt
 800367a:	18e4      	addlt	r4, r4, r3
 800367c:	f000 f8f0 	bl	8003860 <__malloc_lock>
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <_free_r+0x98>)
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	4610      	mov	r0, r2
 8003686:	b933      	cbnz	r3, 8003696 <_free_r+0x2e>
 8003688:	6063      	str	r3, [r4, #4]
 800368a:	6014      	str	r4, [r2, #0]
 800368c:	4628      	mov	r0, r5
 800368e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003692:	f000 b8e6 	b.w	8003862 <__malloc_unlock>
 8003696:	42a3      	cmp	r3, r4
 8003698:	d90c      	bls.n	80036b4 <_free_r+0x4c>
 800369a:	6821      	ldr	r1, [r4, #0]
 800369c:	1862      	adds	r2, r4, r1
 800369e:	4293      	cmp	r3, r2
 80036a0:	bf04      	itt	eq
 80036a2:	681a      	ldreq	r2, [r3, #0]
 80036a4:	685b      	ldreq	r3, [r3, #4]
 80036a6:	6063      	str	r3, [r4, #4]
 80036a8:	bf04      	itt	eq
 80036aa:	1852      	addeq	r2, r2, r1
 80036ac:	6022      	streq	r2, [r4, #0]
 80036ae:	6004      	str	r4, [r0, #0]
 80036b0:	e7ec      	b.n	800368c <_free_r+0x24>
 80036b2:	4613      	mov	r3, r2
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	b10a      	cbz	r2, 80036bc <_free_r+0x54>
 80036b8:	42a2      	cmp	r2, r4
 80036ba:	d9fa      	bls.n	80036b2 <_free_r+0x4a>
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	1858      	adds	r0, r3, r1
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d10b      	bne.n	80036dc <_free_r+0x74>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	4401      	add	r1, r0
 80036c8:	1858      	adds	r0, r3, r1
 80036ca:	4282      	cmp	r2, r0
 80036cc:	6019      	str	r1, [r3, #0]
 80036ce:	d1dd      	bne.n	800368c <_free_r+0x24>
 80036d0:	6810      	ldr	r0, [r2, #0]
 80036d2:	6852      	ldr	r2, [r2, #4]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	4401      	add	r1, r0
 80036d8:	6019      	str	r1, [r3, #0]
 80036da:	e7d7      	b.n	800368c <_free_r+0x24>
 80036dc:	d902      	bls.n	80036e4 <_free_r+0x7c>
 80036de:	230c      	movs	r3, #12
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	e7d3      	b.n	800368c <_free_r+0x24>
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	1821      	adds	r1, r4, r0
 80036e8:	428a      	cmp	r2, r1
 80036ea:	bf04      	itt	eq
 80036ec:	6811      	ldreq	r1, [r2, #0]
 80036ee:	6852      	ldreq	r2, [r2, #4]
 80036f0:	6062      	str	r2, [r4, #4]
 80036f2:	bf04      	itt	eq
 80036f4:	1809      	addeq	r1, r1, r0
 80036f6:	6021      	streq	r1, [r4, #0]
 80036f8:	605c      	str	r4, [r3, #4]
 80036fa:	e7c7      	b.n	800368c <_free_r+0x24>
 80036fc:	bd38      	pop	{r3, r4, r5, pc}
 80036fe:	bf00      	nop
 8003700:	20000098 	.word	0x20000098

08003704 <_malloc_r>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	1ccd      	adds	r5, r1, #3
 8003708:	f025 0503 	bic.w	r5, r5, #3
 800370c:	3508      	adds	r5, #8
 800370e:	2d0c      	cmp	r5, #12
 8003710:	bf38      	it	cc
 8003712:	250c      	movcc	r5, #12
 8003714:	2d00      	cmp	r5, #0
 8003716:	4606      	mov	r6, r0
 8003718:	db01      	blt.n	800371e <_malloc_r+0x1a>
 800371a:	42a9      	cmp	r1, r5
 800371c:	d903      	bls.n	8003726 <_malloc_r+0x22>
 800371e:	230c      	movs	r3, #12
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	2000      	movs	r0, #0
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	f000 f89b 	bl	8003860 <__malloc_lock>
 800372a:	4a21      	ldr	r2, [pc, #132]	; (80037b0 <_malloc_r+0xac>)
 800372c:	6814      	ldr	r4, [r2, #0]
 800372e:	4621      	mov	r1, r4
 8003730:	b991      	cbnz	r1, 8003758 <_malloc_r+0x54>
 8003732:	4c20      	ldr	r4, [pc, #128]	; (80037b4 <_malloc_r+0xb0>)
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	b91b      	cbnz	r3, 8003740 <_malloc_r+0x3c>
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f83d 	bl	80037b8 <_sbrk_r>
 800373e:	6020      	str	r0, [r4, #0]
 8003740:	4629      	mov	r1, r5
 8003742:	4630      	mov	r0, r6
 8003744:	f000 f838 	bl	80037b8 <_sbrk_r>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d124      	bne.n	8003796 <_malloc_r+0x92>
 800374c:	230c      	movs	r3, #12
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	4630      	mov	r0, r6
 8003752:	f000 f886 	bl	8003862 <__malloc_unlock>
 8003756:	e7e4      	b.n	8003722 <_malloc_r+0x1e>
 8003758:	680b      	ldr	r3, [r1, #0]
 800375a:	1b5b      	subs	r3, r3, r5
 800375c:	d418      	bmi.n	8003790 <_malloc_r+0x8c>
 800375e:	2b0b      	cmp	r3, #11
 8003760:	d90f      	bls.n	8003782 <_malloc_r+0x7e>
 8003762:	600b      	str	r3, [r1, #0]
 8003764:	50cd      	str	r5, [r1, r3]
 8003766:	18cc      	adds	r4, r1, r3
 8003768:	4630      	mov	r0, r6
 800376a:	f000 f87a 	bl	8003862 <__malloc_unlock>
 800376e:	f104 000b 	add.w	r0, r4, #11
 8003772:	1d23      	adds	r3, r4, #4
 8003774:	f020 0007 	bic.w	r0, r0, #7
 8003778:	1ac3      	subs	r3, r0, r3
 800377a:	d0d3      	beq.n	8003724 <_malloc_r+0x20>
 800377c:	425a      	negs	r2, r3
 800377e:	50e2      	str	r2, [r4, r3]
 8003780:	e7d0      	b.n	8003724 <_malloc_r+0x20>
 8003782:	428c      	cmp	r4, r1
 8003784:	684b      	ldr	r3, [r1, #4]
 8003786:	bf16      	itet	ne
 8003788:	6063      	strne	r3, [r4, #4]
 800378a:	6013      	streq	r3, [r2, #0]
 800378c:	460c      	movne	r4, r1
 800378e:	e7eb      	b.n	8003768 <_malloc_r+0x64>
 8003790:	460c      	mov	r4, r1
 8003792:	6849      	ldr	r1, [r1, #4]
 8003794:	e7cc      	b.n	8003730 <_malloc_r+0x2c>
 8003796:	1cc4      	adds	r4, r0, #3
 8003798:	f024 0403 	bic.w	r4, r4, #3
 800379c:	42a0      	cmp	r0, r4
 800379e:	d005      	beq.n	80037ac <_malloc_r+0xa8>
 80037a0:	1a21      	subs	r1, r4, r0
 80037a2:	4630      	mov	r0, r6
 80037a4:	f000 f808 	bl	80037b8 <_sbrk_r>
 80037a8:	3001      	adds	r0, #1
 80037aa:	d0cf      	beq.n	800374c <_malloc_r+0x48>
 80037ac:	6025      	str	r5, [r4, #0]
 80037ae:	e7db      	b.n	8003768 <_malloc_r+0x64>
 80037b0:	20000098 	.word	0x20000098
 80037b4:	2000009c 	.word	0x2000009c

080037b8 <_sbrk_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4c06      	ldr	r4, [pc, #24]	; (80037d4 <_sbrk_r+0x1c>)
 80037bc:	2300      	movs	r3, #0
 80037be:	4605      	mov	r5, r0
 80037c0:	4608      	mov	r0, r1
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	f7ff fe42 	bl	800344c <_sbrk>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_sbrk_r+0x1a>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_sbrk_r+0x1a>
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	2000018c 	.word	0x2000018c

080037d8 <_raise_r>:
 80037d8:	291f      	cmp	r1, #31
 80037da:	b538      	push	{r3, r4, r5, lr}
 80037dc:	4604      	mov	r4, r0
 80037de:	460d      	mov	r5, r1
 80037e0:	d904      	bls.n	80037ec <_raise_r+0x14>
 80037e2:	2316      	movs	r3, #22
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80037ee:	b112      	cbz	r2, 80037f6 <_raise_r+0x1e>
 80037f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80037f4:	b94b      	cbnz	r3, 800380a <_raise_r+0x32>
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 f830 	bl	800385c <_getpid_r>
 80037fc:	462a      	mov	r2, r5
 80037fe:	4601      	mov	r1, r0
 8003800:	4620      	mov	r0, r4
 8003802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003806:	f000 b817 	b.w	8003838 <_kill_r>
 800380a:	2b01      	cmp	r3, #1
 800380c:	d00a      	beq.n	8003824 <_raise_r+0x4c>
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	d103      	bne.n	800381a <_raise_r+0x42>
 8003812:	2316      	movs	r3, #22
 8003814:	6003      	str	r3, [r0, #0]
 8003816:	2001      	movs	r0, #1
 8003818:	e7e7      	b.n	80037ea <_raise_r+0x12>
 800381a:	2400      	movs	r4, #0
 800381c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003820:	4628      	mov	r0, r5
 8003822:	4798      	blx	r3
 8003824:	2000      	movs	r0, #0
 8003826:	e7e0      	b.n	80037ea <_raise_r+0x12>

08003828 <raise>:
 8003828:	4b02      	ldr	r3, [pc, #8]	; (8003834 <raise+0xc>)
 800382a:	4601      	mov	r1, r0
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	f7ff bfd3 	b.w	80037d8 <_raise_r>
 8003832:	bf00      	nop
 8003834:	20000010 	.word	0x20000010

08003838 <_kill_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4c07      	ldr	r4, [pc, #28]	; (8003858 <_kill_r+0x20>)
 800383c:	2300      	movs	r3, #0
 800383e:	4605      	mov	r5, r0
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	f7ff fde7 	bl	8003418 <_kill>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d102      	bne.n	8003854 <_kill_r+0x1c>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	b103      	cbz	r3, 8003854 <_kill_r+0x1c>
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	bf00      	nop
 8003858:	2000018c 	.word	0x2000018c

0800385c <_getpid_r>:
 800385c:	f7ff bdd4 	b.w	8003408 <_getpid>

08003860 <__malloc_lock>:
 8003860:	4770      	bx	lr

08003862 <__malloc_unlock>:
 8003862:	4770      	bx	lr

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
